<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="diary" width="1090" height="650" titletext="New Form" onload="diary_onload">
    <Layouts>
      <Layout height="650" mobileorientation="landscape" width="1090">
        <Graphics id="grpScheduler" taborder="0" left="10" top="150" ondblclick="grpScheduler_ondblclick" right="10" bottom="10" onclick="grpScheduler_onclick" onsize="grpScheduler_onsize" minwidth="100" maxwidth="" minheight="100" maxheight=""/>
        <Button id="btnPrev" taborder="1" text="◀" left="35.87%" top="9.23%" width="5.5%" height="6.15%" onclick="btnPrev_onclick" background="transparent" border="0px solid white" font="normal 15pt/normal &quot;Arial&quot;"/>
        <Button id="btnNext" taborder="2" text="▶" left="60.64%" top="9.23%" width="5.5%" height="6.15%" onclick="btnNext_onclick" background="transparent" font="normal 15pt/normal &quot;Arial&quot;" border="0px solid white"/>
        <Static id="stYearMonth" taborder="3" left="42.84%" top="9.38%" width="16.33%" height="6%" textAlign="center" font="bold 24px/normal &quot;Gulim&quot;"/>
        <Static id="Static00" taborder="4" text="업무일지 작성" left="5" top="0" width="116" height="34" cssclass="sta_img_circle01"/>
        <Static id="Static01" taborder="5" text="Static01" left="5" top="34" width="1060" height="1" border="1px solid black,0px none,0px none"/>
        <Button id="btn_del" taborder="6" text="삭제" left="92.57%" top="9.23%" width="5.41%" height="4.62%" onclick="btn_del_onclick" cssclass="btn_WF_gantt03"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[/**
*  @MenuPath    techtip > scheduler
*  techtip Graphics Component를 활용한 월 스케줄러
*  @FileName	workflow.xfdl 
*******************************************************************************
*  2020.06.12		daewon			최초 생성
*******************************************************************************
*/

/**************************************************************************
* include 영역 
**************************************************************************/
include "Lib::lib_base.xjs";
include "Lib::lib_date.xjs";
include "Lib::lib_proDiary.xjs";

/**************************************************************************
* FORM 변수 선언 영역
**************************************************************************/
this.id = nexacro.Application.gvID;
this.name = nexacro.Application.gvProName;
/**************************************************************************
* FORM EVENT 영역(onload)
**************************************************************************/
this.diary_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	
	this.transaction(
		"diaryOnLoad", 
		"/professor/diaryOnLoad.nex",
		"", 
		"dsSchedule=out_diary", 
		"id="+this.id+"", 
		"fn_callback"
	);
	
};

this.fn_callback = function(id, errCode, errMsg){
	
	for(var i=0; i<this.dsSchedule.getRowCount(); i++){
		var date = this.dsSchedule.getColumn(i,"busi_date");
		this.dsSchedule.setColumn(i,"busi_date",date.slice(0,8));
	}
	//스케줄러 설정정보 만들기
	var objConfig = {
		//오늘일자
		"todate" : null,
		
		//현재 표현일자
		"date" : null,
		
		//스케줄 정보를 가지고 있는 데이터셋
		"binddataset" : this.dsSchedule,
		
		//요일 영역
		"week" : {
			//요일 표현 텍스트 리스트
			"weekformat" : ["일", "월", "화", "수", "목", "금", "토"],
			
			//요일 영역 높이
			"height" : 20,
			
			//요일 배경 속성
			"graphicsrect" : {
				"x" : 0, "y" : 0, "width" : 0, "height" : 0,
				"fillstyle" : "#ffffff",
				"strokepen" : "1px solid #c7c7c7"
			},
			
			//요일 텍스트 속성
			"graphicstext" : {
				"x" : 0, "y" : 0,
				"text" : "",
				"textAlign" : "center",
				"verticalAlign" : "middle",
				"font" : 'bold 9pt arial',
				"color" : "#000000"
			}
			
			
		},
		
		//일자 영역
		"day" : {
			//기본일자 텍스트 색상
			"textcolor" : "#000000",
			
			//일요일 텍스트 색상
			"textcolor_sun" : "#ff0000",
			
			//토요일 텍스트 색상
			"textcolor_sat" : "#0000ff",
			
			//이전 or 이후 월 텍스트 색상
			"textcolor_disable" : "#888888",
			
			//일자 배경 속성
			"graphicsrect" : {
				"x" : 0, "y" : 0, "width" : 0, "height" : 0,
				"fillstyle" : "#ffffff",
				"strokepen" : "1px solid #c7c7c7"
			},
			
			//일자 텍스트 속성
			"graphicstext" : {
				"x" : 0, "y" : 0,
				"text" : "",
				"textAlign" : "right",
				"verticalAlign" : "top",
				"font" : 'bold 9pt arial',
				"color" : ""
			}
		},
		//일정 영역		
		"schedule" : {
			//일정 타입별 배경색
			"type" : {
				"01" : "#ffffff",
				"02" : "#ffffff",
				"03" : "#ffffff",
				"04" : "#ffffff"
			},
			
			//일정 영역 높이
			"height" : 70,
			
			//일정 간 간격
			"gap" : 5,
			
			//일정 배경 속성
			"graphicsrect" : {
				"x" : 0, "y" : 0, "width" : 0, "height" : 0,
				"fillstyle" : "#ffffff",
				"strokepen" : "1px solid transparent"
			},
			
			//일정 텍스트 속성
			"graphicstext" : {
				"x" : 0, "y" : 0,
				"text" : "",
				"textAlign" : "left",
				"verticalAlign" : "middle",
				"font" : 'bold 10pt arial',
				"color" : "#000000"
			}
		},
		//더보기 영역		
		"more" : {
			//더보기 높이
			"height" : 20,
			
			//더보기 배경 속성
			"graphicsrect" : {
				"x" : 0, "y" : 0, "width" : 0, "height" : 0,
				"fillstyle" : "#888888",
				"strokepen" : "1px solid #000000"
			},
			
			//더보기 텍스트 속성
			"graphicstext" : {
				"x" : 0, "y" : 0,
				"text" : "More",
				"textAlign" : "left",
				"verticalAlign" : "middle",
				"font" : 'bold 9pt arial',
				"color" : "#000000"
			}
		}
	}
	
	//스케줄러 초기화 함수 호출
	this.gfnInitScheduler(this.grpScheduler, objConfig);
	
	//스케줄러 현재월 텍스트 구해오기
	var sYearMonth = this.gfnGetMaskFormatDateToString(this.grpScheduler.config.date, "yyyy.MM");
	
	//현재월 텍스트 설정
	this.stYearMonth.set_text(sYearMonth);
	
}

this.fn_callback_update = function(id, errCode, errMsg){
	if(id=="updateDiary"){
		if(errCode=="1"){
			alert("입력완료");
		}else{
			alert("입력에 실패했습니다.");
		}
	}
	this.reload();
};
/**************************************************************************
* CALLBACK 콜백 처리부분(Transaction)
**************************************************************************/

/**************************************************************************
* CRUD 및 TRANSACTION 서비스 호출 처리
**************************************************************************/

/**************************************************************************
* 각 COMPONENT 별 EVENT 영역
**************************************************************************/
/**
* @description 신규일정 버튼 onclick 시 처리내역
*/
this.btnNew_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//팝업오픈 함수 호출
	this.fnOpenSchedulePop("new");
};

this.btn_del_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var objCF = new ChildFrame();
	objCF.init("delDiary", '', '', '', ''); 
	objCF.set_formurl("Professor::diary_del_pop.xfdl"); 
	objCF.set_openalign("center middle");
	objCF.set_dragmovetype("all");
	objCF.set_overlaycolor("rgba(0,0,0,0.3)");
	objCF.showModal(
		this.getOwnerFrame()
		,{dataSet:this.dsSchedule}  
		,this
		,"fn_callback_pop"
	);
};
this.fn_callback_pop = function(id,code){
	if(id=="delDiary"){
		if(code=="1"){
			alert("삭제완료");
			this.reload();
		}
	}
	
};
/**
* @description 이전 버튼 onclick 시 처리내역
*/
this.btnPrev_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//스케줄러 현재월 정보 가져오기
	var objDate = this.grpScheduler.config.date;
	
	//이전월 정보 가져오기
	var objPrevDate = this.gfnAddMonth(objDate, -1);
	
	//이전월 텍스트 가져오기
	var sYearMonth = this.gfnGetMaskFormatDateToString(objPrevDate, "yyyy.MM");
	
	//이전월로 텍스트 설정
	this.stYearMonth.set_text(sYearMonth);
	
	//이전월로 스케줄러 설정 함수 호출
	this.gfnSetScheduler(this.grpScheduler, objPrevDate);
};

/**
* @description 다음 버튼 onclick 시 처리내역
*/
this.btnNext_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//스케줄러 현재월 정보 가져오기
	var objDate = this.grpScheduler.config.date;
	
	//다음월 정보 가져오기
	var objNextDate = this.gfnAddMonth(objDate, 1);
	
	//다음월 텍스트 가져오기
	var sYearMonth = this.gfnGetMaskFormatDateToString(objNextDate, "yyyy.MM");
	
	//다음월로 텍스트 설정
	this.stYearMonth.set_text(sYearMonth);
	
	//다음월로 스케줄러 설정 함수 호출
	this.gfnSetScheduler(this.grpScheduler, objNextDate);
};

/**
* @description Graphics Component onsize 시 처리내역
*/
this.grpScheduler_onsize = function(obj:nexacro.Graphics,e:nexacro.SizeEventInfo)
{
	//Graphics 컴포넌트의 사이즈가 변경되었을 경우
	//스케줄러 설정함수를 호출하여 사이즈 갱신
	this.gfnSetScheduler(this.grpScheduler);
};

/**
* @description Graphics Component onclick 시 처리내역
*/
this.grpScheduler_onclick = function(obj:nexacro.Graphics,e:nexacro.ClickEventInfo)
{
	//클릭된 위치의 Graphic 오브젝트 가져오기
	var objGraphic = obj.hitTest(e.canvasx, e.canvasy);
	
	//클릭된 오브젝트가 더보기일 경우
	if(objGraphic.id.split("_")[0]=="more")
	{
		var nTop;
		var nHeight;
		
		//더보기 텍스트 가져오기
		var sMoreText = objGraphic.parent.getObjectByID("more_text").text;
		
		//스케줄러 설정함수를 호출하여 초기화
		this.gfnSetScheduler(this.grpScheduler);
		
		//더보기 텍스트가 More일 경우
		//해당 일자 Schedule이 전부 보일 수 있도록 영역 확장
		if(sMoreText=="More")
		{
			//설정이 초기화 되었으므로 클릭된 오브젝트 다시 가져오기
			objGraphic = obj.hitTest(e.canvasx, e.canvasy);
			
			//스케줄러 설정정보 가져오기
			var objConfig = obj.config;
			
			//더보기 설정정보 가져오기
			var objMore = objGraphic.parent;
			
			//더보기 텍스트 Graphic 오브젝트 가져오기
			var objMoreText = objMore.getObjectByID("more_text");
			
			//일자영역 Graphic 오브젝트 가져오기
			var objDay = objMore.parent;
			
			//일자 그룹 영역 Graphics 오브젝트 가져오기
			var objDayGroup = objDay.parent;
			
			//더보기 텍스트를 Less로 변경
			objMoreText.set_text("Less");
			
			//더보기 영역이 스케줄 최하단에 위치하도록 변경
			objMore.set_y(objDay.getRect().height + 5);
			
			//일자영역의 높이 다시 구하기
			nHeight = objDay.getRect().height;
			
			//일자영역을 전체스케줄의 높이에 맞춰 변경
			objDay.getObjectByID("day_bg").set_height(nHeight);
			
			
			//일자영역이 Graphics Component를 벗어날 경우 예외처리
			nTop = objDay.getRect().top;
			
			//일자영역의 위치가 Graphics Component보다 클 경우
			if(nTop+nHeight>obj.getOffsetHeight())
			{
				//Graphics Component 높이 - 일자영역 높이 - 일자 그룹의 Top 좌표 - 보더 값(-1)
				nTop = obj.getOffsetHeight()-nHeight - objDay.parent.y - 1;
				
				//일자영역의 y좌표 변경
				objDay.set_y(nTop);
			}
			
			//일자 그룹에서 일자영역 삭제
			//(일자 그룹에서 일자영역을 꺼냈다 다시 넣어서 Bring To Front 효과를 주기 위함)
			objDay = objDayGroup.removeChild(objDay.id);
			
			//일자 그룹에 일자영역 추가
			//(일자 그룹에서 일자영역을 꺼냈다 다시 넣어서 Bring To Front 효과를 주기 위함)
			objDayGroup.addChild(objDay.id, objDay);
			
			//스케줄러 다시그리기
			obj.redraw();
		}
	}
};

/**
* @description Graphics Component ondblclick 시 처리내역
*/
this.grpScheduler_ondblclick = function(obj:nexacro.Graphics,e:nexacro.MouseEventInfo)
{
	var oArg;
	var nRow;
	var sId;
	var sDate;
	var sType;
	var sTitle;
	var sContent;
	var objSchedule;
	
	//더블 클릭된 위치의 Graphic 오브젝트 가져오기
	var objGraphic = obj.hitTest(e.canvasx, e.canvasy);
	
	//스케줄러 설정정보 가져오기
	var objConfig = obj.config;
	
	//스케줄러와 연결된 데이터셋 가져오기
	var objDs = objConfig.binddataset;
	
	//더블 클릭된 오브젝트가 일정영역일 경우
	if(objGraphic.id.split("_")[0]=="schedule")
	{
		//일정 그룹 오브젝트 가져오기
		objSchedule = objGraphic.parent;
		
		//일정의 ID 가져오기
		sId = objSchedule.id;
		
		//데이터셋에서 ID에 해당하는 일정 찾기
		nRow = objDs.findRow("busi_seq", sId);
		
		//일정 일자 가져오기
		sDate = objDs.getColumn(nRow, "busi_date");
		
		//일정 타입 가져오기
		sType = "01";
		
		//일정 제목 가져오기
		sTitle = objDs.getColumn(nRow, "busi_proName");
		
		//일정 내용 가져오기
		sContent = objDs.getColumn(nRow, "busi_contents");
		
		//팝업오픈 함수 호출
		this.fnOpenSchedulePop("modify", sId, sDate, sType, sTitle, sContent);
	}
	//더블 클릭된 오브젝트가 일자영역일 경우
	else if(objGraphic.id.split("_")[0]=="day")
	{
		//일자 그룹 오브젝트 가져오기
		objDay = objGraphic.parent;
		
		//일자 정보 가져오기(ex) day_20200612 --> 20200612)
		sDate = objDay.id.split("_")[1];
		
		//작성자 이름 가져오기
		sTitle = this.name;

		for(var i = 0; i<this.dsSchedule.getRowCount(); i++){
			if(sDate==this.dsSchedule.getColumn(i,"busi_date")){
				alert("해당 업무일지가 존재합니다");
				return 0;
			}
		}
		
		//팝업오픈 함수 호출
		this.fnOpenSchedulePop("new", null, sDate, null, sTitle);
	}
};

/**************************************************************************
* 사용자 FUNCTION 영역
**************************************************************************/
/**
* @description 	      	: 팝업 호출 함수
* @param sPopupType		: 팝업 타입(new : 신규, modify 수정)
* @param sId    		: 일정 ID
* @param sDate    		: 일정 일자
* @param sType    		: 일정 타입
* @param sTitle    		: 일정 제목
* @param sContent    	: 일정 내용
* @return             	: 없음
*/
this.fnOpenSchedulePop = function(sPopupType, sId, sDate, sType, sTitle, sContent)
{
	var oArg = { "popuptype" : sPopupType, "scheduleid" : "", "date" : "", "type" : "", "title" : "", "content" : "" };
	
	if(sId)oArg.scheduleid = sId;
	if(sDate)oArg.date = sDate;
	if(sType)oArg.type = sType;
	if(sTitle)oArg.title = sTitle;
	if(sContent)oArg.content = sContent;
	this.gfnShowModal("popupModal", oArg, "Professor::diary_pop.xfdl", "fnPopupCallBack", this, 720, 680, true, true, null);
}

/**
* @description 	      	: 팝업 콜백 함수
* @param sFormId		: 팝업 ID
* @param sArg    		: 일정 정보
* @return             	: 없음
*/
this.fnPopupCallBack = function(sFormId, sArg)
{
	if(sFormId == 'popupModal')
	{
		//일정 정보가 있을 경우
		if(sArg)
		{
			var nRow;
			var code = "";
			//일정 정보를 JSON오브젝트로 만들기
			var objRtn = JSON.parse(sArg);
			
			//수정일 경우
			if(objRtn.popuptype=="modify")
			{
				//데이터셋에서 ID에 해당하는 일정 찾기
				nRow = this.dsSchedule.findRow("busi_seq", objRtn.id);
				//일정 정보 변경
				this.dsSchedule.setColumn(nRow, "busi_date", objRtn.date);
				this.dsSchedule.setColumn(nRow, "busi_contents", objRtn.content);
				this.dsSchedule.setColumn(nRow, "busi_proId", this.id);
				this.dsSchedule.setColumn(nRow, "busi_proName", this.name);
				code ="update";
				this.ds_transaction.copyRow(0,this.dsSchedule,nRow);
				trace("여기임");
			}
			//신규일 경우
			else if(objRtn.popuptype=="new")
			{
				//신규 Row 추가
				//일정 정보 등록
				code ="insert";
				
				this.ds_transaction.setColumn(0,"busi_seq",nexacro.round(Math.random()*1000, 0));
				this.ds_transaction.setColumn(0,"busi_date",objRtn.date);
				this.ds_transaction.setColumn(0,"busi_contents",objRtn.content);
				this.ds_transaction.setColumn(0,"busi_proId",this.id);
				this.ds_transaction.setColumn(0,"busi_proName",this.name);
				this.ds_transaction.setColumn(0,"check",0);
				
			}
			this.transaction(
				"updateDiary", 
				"/professor/updateDiary.nex",
				"in_ds=ds_transaction",
				"", 
				"id="+code+"", 
				"fn_callback_update"
			);
		}
	}
}

/**
* @description 	      		: 팝업 공통 함수
* @param sPopupId  			: 팝업 ID
* @param arrArguments    	: 전달할 Arguments
* @param sPopupUrl    		: 팝업 URL
* @param popupCallback    	: 팝업 Callback 함수명
* @param obj    			: 부모 Form 오브젝트
* @param nPopupWidth    	: 팝업 Width
* @param nPopupHeight    	: 팝업 Height
* @param bShowFrameTitle    : 타이틀바 표현 여부
* @param bShowFrameStatus	: 스테이터스바 표현 여부
* @param sAlignType			: 팝업 표시 위치 
* @return             		: 없음
*/
this.gfnShowModal = function (sPopupId, arrArguments, sPopupUrl, popupCallback, obj, nPopupWidth, nPopupHeight, bShowFrameTitle, bShowFrameStatus, sAlignType)
{
	// 현재 구동되는 정보를 업데이트 한다.
	var childFrame = new ChildFrame();
	var parentFrame = obj.getOwnerFrame();
	
	var sOpenAlignType = "center middle";
	
	// TO-DO 팝업사이즈 미지정 시 디폴트 값 적용
	if (this.gfnIsNull(nPopupWidth)) 
	{
		nPopupWidth = obj.confing.popupWidth;
	}
	
	if (this.gfnIsNull(nPopupHeight)) 
	{
		nPopupHeight = obj.confing.popupHeight;
	}
	
	var sShowStatus;
	if (this.gfnIsNull(bShowFrameStatus) || bShowFrameStatus == false) 
	{
		sShowStatus = false;
	}
	else if (bShowFrameStatus == true) 
	{
		sShowStatus = true;
	}
	
	if (!this.gfnIsNull(sAlignType)) 
	{
		sOpenAlignType = sAlignType;
	}
	
	var nPopupLeft = "";
	var nPopupTop = "";
	
	// 팝업 포지션 값 위치 설정
	nPopupLeft = 0;
	nPopupTop = 0;
	
	/* ===== Statusbar 옵션 추가 - Start ===== */
	if (sShowStatus == true) 
	{
		childFrame.init(sPopupId, nPopupLeft, nPopupTop, nexacro.toNumber(nPopupWidth) + 4, nexacro.toNumber(nPopupHeight) + 20 + 4 + 25, null, null, sPopupUrl);
		childFrame.set_statusbarheight(25);
		childFrame.set_showstatusbar(true);
	}
	else 
	{
		childFrame.init(sPopupId, nPopupLeft, nPopupTop, nexacro.toNumber(nPopupWidth) + 4, nexacro.toNumber(nPopupHeight) + 20 + 4, null, null, sPopupUrl);
	}
	
	/* ===== Statusbar 옵션 추가 - End   ===== */
	childFrame.set_openalign(sOpenAlignType);
	childFrame.set_overlaycolor("RGBA(0, 0, 0, 0.3)");
	childFrame.set_autosize(false);	
	childFrame.set_dragmovetype("normal");
	
	if (this.gfnIsNull(bShowFrameTitle) || bShowFrameTitle == true) 
	{
		childFrame.set_showtitlebar(true);
		childFrame.set_border("3 solid #351b6f");
		childFrame.set_border("normal");
	}else{
		childFrame.set_showtitlebar(false);
	}
	
	// 동적으로 생성한 ChildFrame을 Modal Dialog로 보여줌.
	childFrame.showModal(parentFrame, arrArguments, obj, popupCallback, true);
};


]]></Script>
    <Objects>
      <Dataset id="dsSchedule">
        <ColumnInfo>
          <Column id="check" type="STRING" size="256"/>
          <Column id="busi_seq" type="INT" size="256"/>
          <Column id="busi_proId" type="STRING" size="256"/>
          <Column id="busi_proName" type="STRING" size="256"/>
          <Column id="busi_contents" type="STRING" size="256"/>
          <Column id="busi_date" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="busi_seq">12</Col>
            <Col id="busi_proId">P-1001</Col>
            <Col id="busi_proName">김교수</Col>
            <Col id="busi_contents">ㅁㄴㅇㅁㄴㅇㅁ</Col>
            <Col id="busi_date">20210216</Col>
          </Row>
          <Row>
            <Col id="busi_seq">13</Col>
            <Col id="busi_proId">P-1001</Col>
            <Col id="busi_proName">김교수</Col>
            <Col id="busi_contents">33213</Col>
            <Col id="busi_date">20210205</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="ds_transaction">
        <ColumnInfo>
          <Column id="check" type="STRING" size="256"/>
          <Column id="busi_seq" type="INT" size="256"/>
          <Column id="busi_proId" type="STRING" size="256"/>
          <Column id="busi_proName" type="STRING" size="256"/>
          <Column id="busi_contents" type="STRING" size="256"/>
          <Column id="busi_date" type="DATE" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
  </Form>
</FDL>
